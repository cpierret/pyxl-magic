__author__ = 'cpierret'
import io
import struct

_bpk = bytes(b'PK\003\004')
_dirpk = bytes(b'PK\001\002')

_firstHeader = {
    '[': 'Content_Types].xml',
    'x': 'l/',
    'd': 'ocProps/',
    '_': 'rels/.rels'
}
_excelOffsetStringDict = {
    0: b'\x09\x04\x06\x00\x00\x00\x10\x00',
    2080: b"Microsoft Excel 5.0 Worksheet",
    2080: b"Foglio di lavoro Microsoft Exce",
    2114: b"Biff5",
    2121: b"Biff5"
    }
_msoffice = b'\xD0\xCF\x11\xE0\xA1\xB1\x1A\xE1'
_workbook = b'W\x00o\x00r\x00k\x00b\x00o\x00o\x00k\x00'
_unpacker = struct.Struct('<HII')

def isExcel(file):
    """
    Detects if a file is in an Excel 2007+ (MS OpenXml format) or another Excel version binary file (OLE CF format).
    Adapted and improved from libmagic rule files: msdos and msooxml
    False negatives:
    - MS Office HTML Excel files
    - Some files generated by non Microsoft 3rd party applications may also not be recognized
    - encrypted Excel files

    :param file: the path to the file to be tested
    :return: True if Excel file detected, False otherwise (may still be a valid Excel file)
    """
    try:
        with open(file, "rb") as f:
            bytes = f.read(4)
            if bytes != _bpk:
                # Check for formats prior to Excel 2007
                for offset, magic in _excelOffsetStringDict.iteritems():
                    f.seek(offset)
                    if f.read(len(magic)) == magic:
                        return True
                    f.seek(0)
                    if f.read(len(_msoffice)) == _msoffice:
                        f.seek(0x480)
                        if f.read(len(_workbook)) == _workbook:
                            return True
                        f.seek(-500,io.SEEK_END)
                        if f.read(500).find(_workbook) != -1:
                            return True
                return False
            # possibly OpenXML Excel2007+, parse zip central directory
            statinfo = os.stat(file)
            filesize = min(statinfo.st_size,65534)
            blocksize = 2114
            bytes = b''
            f.seek(-blocksize, io.SEEK_END)
            while filesize>=blocksize:
                bytes = bytearray(f.read(blocksize)) + bytes
                position = bytes.find(b'PK\x05\x06')
                if position != -1:
                    position + 12
                    direntries, dirsize, diroffset = _unpacker.unpack(bytes[position+10:position+20])
                    if diroffset+dirsize > statinfo.st_size:
                        return False
                    f.seek(diroffset)
                    directory = bytearray(f.read(dirsize))
                    pos = 0
                    for i in xrange(direntries):
                        if directory[pos+0:pos+4] != _dirpk:
                            return False
                        curs = pos+0x1b
                        sizes = (directory[curs]*256+directory[curs+1],directory[curs+2]*256+directory[curs+3],directory[curs+4]*256+directory[curs+5])
                        if directory[pos+0x2E:pos+0x2E+sizes[0]] == "xl/workbook.xml":
                            return True
                        pos = pos + 0x2E+ sum(sizes)
                        if pos + 0x2E > len(directory):
                            return False
                    return False
                blocksize *= 2
                f.seek(-blocksize)
                filesize -= blocksize
            return False
        return False
    except IOError as e:
        return False

if __name__ == '__main__':
    import sys, os
    _xlsExt = ['.xls','.xlsx','.xlsm','.xlam']
    root = 'c:\\'
    print "Finding all files with an Excel extension that are not detected as an Excel file in "+root
    for path, subdirs, files in os.walk(root):
        for name in files:
            if name[0] != '~' and name[0] != '$' and os.path.splitext(name)[1].lower() in _xlsExt:
                    filename = os.path.join(path, name)
                    if not isExcel(filename):
                        print filename
